1. Display all employees who are manager in office.

Code:  awk '/manager/' empdata

2. List the details of an employee “Jai” in Mumbai office.

Code: awk -F "~" '$1=="Raj" && $8=="Mumbai"'
empdata


3. Display all employees who are not in the department MKT. display the output sorted on
department code.

Code 
 awk -F "~" '$3!="MKT" empdata|sort -t "~" -k3

4. Display all employees whose years of experience are more than 5.

Code: awk -F "~" '$6>"5"' empdata


5. List only employee name, department code and basic pay of employees who are executive.

Code:  awk -F "~" '$5=="executive" {print
$1,$3,$9}' empdata

6. Display all employees having grade ‘A’.

Code: awk -F "~" '$4=="A" {print $1}' empdata


7. Count total number of employees whose department code is HRD.

Code:
 awk -F "~" '$3=="HRD"
> {cnt=cnt+1}
> end{
> printf "totalnumber of employees whose department code is 'HRD' is %d
\n",cnt}' empdata


8. Display employee’s names with salary above 10,000.

Code: awk -F "~" '$9>"10000"{print $1}' empdata


9. Display only designation and basic pay of employees having number of experience between three
and 5.

Code: awk -F "~" '"$6>3 && $6<5"{print $5,$9}'empdata

10. Find the number of employees in Pune office.
Code:
awk -F "~" '$8=="Pune"
> {cnt=cnt+1}
> end{
> printf "Number of employees in Pune office is %d/n",cnt}' empdata


11. Display employees who get basic pay less than 15000, also calculate and display average basic
pay.

Code:
 awk 'BEGIN {FS="~"
> OFS=":"
> printf "\nDetails\n"
> } $9<15000{
> cnt=cnt+1; add=add+$9
> print NR,NF,$0
> }END{
> avg=add/cnt
> printf "The average salary of employees is %d\n",avg}' empdata


12. Locate the employees with same date of birth in Pune office.
Code: awk -F "~" '$8=="Pune" && $7=="01-01-
75"{print NR, $1}' empdata


13. Locate all for Raj, Jai and Kamal as employee name.
Code: awk -F "~"
'$1=="Raj"||$1=="Jai"||$1=="Kamal"' empdata

14. Locate all except for Raj, Jai and Kamal as employee name.
Code: awk -F "~" '$1!~/Raj|Jai|Kamal/' empdata


15. Find the employees who have designation as director and find the 40% of basic pay as da and
15% of basic pay as hra.
Code:
 awk -F "~" '$5=="director"{
>da=$9*0.04;hra=$9*0.15
> print nr,nf,$1,$9,da,hra}' empdata


16. Store employee name and date of birth in a file’ nbdata’.

Code: awk -F "~" '{print $1,$7}'empdata|tee nbdata


B) Create a file student with following fields:-
Fieldname Datatype Value
Student code numeric
Student name character
Batch code character B11-B15
No. of modules numeric 1-5
Average marks numeric
Insert at least five records in above file; ‘:’ is used as a field separator. Give commands for the
following:-

[tybscit@localhost Desktop]$ cat>stud
1:Anna:B11:5:90
2:Ram:B12:7:88
3:Hugh:B13:4:70
4:Tom:B14:1:55
5:Leo:B15:4:65

1. Display the details of student in order of their names ignoring case.

Code:awk '{print}' stud|sort -t ":" -k 2 -f


2. Display the details of students whose number of modules is greater than 3.

Code:  awk -F ":" '$4>3{print "%s\n",$0}' stud


3. Store the list of rank holders in file ‘merit’ along with student code and student name, and marks
& display its contents.

Code:  sort -t ":" -k5 -r -n stud|head -3|awk -F
":" '{print $1,$2,$5}'>merit

4. Count the number of students in batch B13.

Code: awk -F ":" '$3=="B13"{


5. Display the names of students with same names.

Code :  awk -F ":" '$2~/[aA][bB][cC]/' stud

6. Display the students belonging to batch codes B12 or B15.

Code: awk -F ":" '$3=="B12" || $3=="B15"{print
$1}' stud

7. Display all the names not starting with ‘a’ or ‘A’.

Code: awk -F ":" '$2~/^[^aA]/' stud

8. Display all the names starting with ‘a’ or ‘A’.

Code:  awk -F ":" '$2~/^[aA]/' stud

9. Display and count the number of students having marks in the range 40 to 60. Also display the
total and average marks.

Code:
 awk 'BEGIN{FS=":"
> OFS=":"
>printf "Details\n"
> }$5>=40 && $5<=60{
>cnt=cnt+1
>tot=tot+$5
> print NR,$2
> }END{
>avg=tot/cnt
>printf "Total marks:%d\n",tot
>printf "Average marks :%d\n",avg
>printf "Total students :%d\n",cnt}' stud


10. Display the student’s records from line number 2 to 4.

Code:  awk -F ":" 'NR==2,NR==4{printf "%d%s\n",NR,$0}' stud


11. Display the student’s records that are having number of fields 5.

Code:awk -F ":" 'NF==5{print $0}' stud


12. Display the student’s records that are having number of fields less than or equal to 4.

Code: awk -F ":" 'NF<=4{printf $0}' stud

13. Display the student code, student name and marks that are having number of fields greater than 5.

Code:  awk -F ":" 'NF<=5{print $1,$2,$5}' stud

14. Display the student’s name having the length greater than 3.

Code: awk -F ":" 'length($2)>3{print $1,$2,$5}'
stud


15. Display the student’s records having the length of student name less than or equal to 3.

Code:  awk -F ":" 'length($2)<=3{print $1,$2,$5}'
stud


16. Display the student’s records having the length less than or equal to 15.

Code:  awk -F ":" 'length($2)<=15{print $1,$2,$5}'
stud


17. Display the student’s records having the length greater than or equal to 15.

Code :
 awk -F ":" 'length($2)>=15{print $1,$2,$5}' stud

18. Display the student’s records having the length is in the range 5 to 15.

Code:  awk -F ":" 'length >=5 && length<=15{print
$0}' stud


19. Display the line number and index having character ‘b’ in student name.

Code:  awk -F ":" '{print NR,index($2,"b")}' stud


20. Display the line number, student name and index having character ‘b’ in student name.

Code: awk -F ":" '{print NR,index($2,"b"),$2}'
stud


21. Display the index, student name and marks having character ‘b’ in student name.

Code: awk -F ":" '{print index($2,"b"),$2,$5}'
stud


22. Display the line number, index, student name and marks having character ‘b’ in student name.

Code:  awk -F ":" '{print NR,index($2,"b"),$2,$5}'
stud
